{
  "service": {
    "service": "task-management-backend",
    "serviceObject": {
      "name": "task-management-backend"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs18.x",
      "region": "eu-west-1",
      "profile": "catherine-amalitech",
      "environment": {
        "TASKS_TABLE": {
          "Ref": "TasksTable"
        },
        "USERS_TABLE": {
          "Ref": "UsersTable"
        },
        "TEAMS_TABLE": {
          "Ref": "TeamsTable"
        }
      },
      "iam": {
        "role": {
          "statements": [
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:PutItem",
                "dynamodb:GetItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:Scan"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "TasksTable",
                    "Arn"
                  ]
                },
                {
                  "Fn::GetAtt": [
                    "UsersTable",
                    "Arn"
                  ]
                },
                {
                  "Fn::GetAtt": [
                    "TeamsTable",
                    "Arn"
                  ]
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "sns:Publish"
              ],
              "Resource": {
                "Ref": "NotificationTopic"
              }
            }
          ]
        }
      },
      "httpApi": {
        "cors": {
          "allowedOrigins": [
            "http://localhost:5173",
            "https://d84l1y8p4kdic.cloudfront.net"
          ],
          "allowedMethods": [
            "GET",
            "POST",
            "PUT",
            "PATCH",
            "DELETE",
            "OPTIONS"
          ],
          "allowedHeaders": [
            "Content-Type",
            "Authorization"
          ]
        }
      },
      "stage": "dev",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "CreateTaskLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/task-management-backend-dev-createTask"
            }
          },
          "GetTasksLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/task-management-backend-dev-getTasks"
            }
          },
          "UpdateTaskLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/task-management-backend-dev-updateTask"
            }
          },
          "DeleteTaskLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/task-management-backend-dev-deleteTask"
            }
          },
          "GetUsersLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/task-management-backend-dev-getUsers"
            }
          },
          "CreateTeamLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/task-management-backend-dev-createTeam"
            }
          },
          "GetTeamsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/task-management-backend-dev-getTeams"
            }
          },
          "UpdateTeamLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/task-management-backend-dev-updateTeam"
            }
          },
          "DeleteTeamLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/task-management-backend-dev-deleteTeam"
            }
          },
          "UpdateTaskPatchLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/task-management-backend-dev-updateTaskPatch"
            }
          },
          "NotifyTeamLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/task-management-backend-dev-notifyTeam"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "task-management-backend",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/task-management-backend-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/task-management-backend-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][0]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][1]"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "task-management-backend",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "CreateTaskLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/task-management-backend/dev/1748868123421-2025-06-02T12:42:03.421Z/task-management-backend.zip"
              },
              "Handler": "src/handlers/createTask.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "task-management-backend-dev-createTask",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "TASKS_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"TASKS_TABLE\"]"
                  },
                  "USERS_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"USERS_TABLE\"]"
                  },
                  "TEAMS_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"TEAMS_TABLE\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateTaskLogGroup"
            ]
          },
          "GetTasksLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/task-management-backend/dev/1748868123421-2025-06-02T12:42:03.421Z/task-management-backend.zip"
              },
              "Handler": "src/handlers/getTasks.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "task-management-backend-dev-getTasks",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "TASKS_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"TASKS_TABLE\"]"
                  },
                  "USERS_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"USERS_TABLE\"]"
                  },
                  "TEAMS_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"TEAMS_TABLE\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetTasksLogGroup"
            ]
          },
          "UpdateTaskLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/task-management-backend/dev/1748868123421-2025-06-02T12:42:03.421Z/task-management-backend.zip"
              },
              "Handler": "src/handlers/updateTask.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "task-management-backend-dev-updateTask",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "TASKS_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"TASKS_TABLE\"]"
                  },
                  "USERS_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"USERS_TABLE\"]"
                  },
                  "TEAMS_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"TEAMS_TABLE\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateTaskLogGroup"
            ]
          },
          "DeleteTaskLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/task-management-backend/dev/1748868123421-2025-06-02T12:42:03.421Z/task-management-backend.zip"
              },
              "Handler": "src/handlers/deleteTask.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "task-management-backend-dev-deleteTask",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "TASKS_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"TASKS_TABLE\"]"
                  },
                  "USERS_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"USERS_TABLE\"]"
                  },
                  "TEAMS_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"TEAMS_TABLE\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteTaskLogGroup"
            ]
          },
          "GetUsersLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/task-management-backend/dev/1748868123421-2025-06-02T12:42:03.421Z/task-management-backend.zip"
              },
              "Handler": "src/handlers/getUsers.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "task-management-backend-dev-getUsers",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "TASKS_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"TASKS_TABLE\"]"
                  },
                  "USERS_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"USERS_TABLE\"]"
                  },
                  "TEAMS_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"TEAMS_TABLE\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetUsersLogGroup"
            ]
          },
          "CreateTeamLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/task-management-backend/dev/1748868123421-2025-06-02T12:42:03.421Z/task-management-backend.zip"
              },
              "Handler": "src/handlers/createTeam.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "task-management-backend-dev-createTeam",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "TASKS_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"TASKS_TABLE\"]"
                  },
                  "USERS_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"USERS_TABLE\"]"
                  },
                  "TEAMS_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"TEAMS_TABLE\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateTeamLogGroup"
            ]
          },
          "GetTeamsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/task-management-backend/dev/1748868123421-2025-06-02T12:42:03.421Z/task-management-backend.zip"
              },
              "Handler": "src/handlers/getTeam.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "task-management-backend-dev-getTeams",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "TASKS_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"TASKS_TABLE\"]"
                  },
                  "USERS_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"USERS_TABLE\"]"
                  },
                  "TEAMS_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"TEAMS_TABLE\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetTeamsLogGroup"
            ]
          },
          "UpdateTeamLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/task-management-backend/dev/1748868123421-2025-06-02T12:42:03.421Z/task-management-backend.zip"
              },
              "Handler": "src/handlers/updateTeam.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "task-management-backend-dev-updateTeam",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "TASKS_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"TASKS_TABLE\"]"
                  },
                  "USERS_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"USERS_TABLE\"]"
                  },
                  "TEAMS_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"TEAMS_TABLE\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateTeamLogGroup"
            ]
          },
          "DeleteTeamLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/task-management-backend/dev/1748868123421-2025-06-02T12:42:03.421Z/task-management-backend.zip"
              },
              "Handler": "src/handlers/deleteTeam.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "task-management-backend-dev-deleteTeam",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "TASKS_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"TASKS_TABLE\"]"
                  },
                  "USERS_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"USERS_TABLE\"]"
                  },
                  "TEAMS_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"TEAMS_TABLE\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteTeamLogGroup"
            ]
          },
          "UpdateTaskPatchLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/task-management-backend/dev/1748868123421-2025-06-02T12:42:03.421Z/task-management-backend.zip"
              },
              "Handler": "src/handlers/updateTask.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "task-management-backend-dev-updateTaskPatch",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "TASKS_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"TASKS_TABLE\"]"
                  },
                  "USERS_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"USERS_TABLE\"]"
                  },
                  "TEAMS_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"TEAMS_TABLE\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateTaskPatchLogGroup"
            ]
          },
          "NotifyTeamLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/task-management-backend/dev/1748868123421-2025-06-02T12:42:03.421Z/task-management-backend.zip"
              },
              "Handler": "src/handlers/notifyTeam.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "task-management-backend-dev-notifyTeam",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "TASKS_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"TASKS_TABLE\"]"
                  },
                  "USERS_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"USERS_TABLE\"]"
                  },
                  "TEAMS_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"TEAMS_TABLE\"]"
                  },
                  "NOTIFICATION_TOPIC_ARN": {
                    "Ref": "NotificationTopic"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "NotifyTeamLogGroup"
            ]
          },
          "CreateTaskLambdaVersion8Z91hibZ7AV92l7hZeMHorPAa2icwTLYJhAmf4OYCs": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateTaskLambdaFunction"
              },
              "CodeSha256": "ZGFeEQ+buIMz1i2UtuKsZHyH8pfcupV15v4dXUsuOL4="
            }
          },
          "GetTasksLambdaVersionB5dG8eFZMI35JaeBOVQ4QDTApRKmYqyeSsc1E6pJCD8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetTasksLambdaFunction"
              },
              "CodeSha256": "ZGFeEQ+buIMz1i2UtuKsZHyH8pfcupV15v4dXUsuOL4="
            }
          },
          "UpdateTaskLambdaVersionVLQ1Z4VyBBAp6hQJv1EzEYWZF3rd8itUKphMt3TagTQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateTaskLambdaFunction"
              },
              "CodeSha256": "ZGFeEQ+buIMz1i2UtuKsZHyH8pfcupV15v4dXUsuOL4="
            }
          },
          "DeleteTaskLambdaVersionAzECL8WaYO6446RUdzpJONvh5dVTqa2VvNbLfRszg": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteTaskLambdaFunction"
              },
              "CodeSha256": "ZGFeEQ+buIMz1i2UtuKsZHyH8pfcupV15v4dXUsuOL4="
            }
          },
          "GetUsersLambdaVersionve1ui3kRSxxNIDhXDjLOMJTwbV7oTBSxbdpY5kHktuQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetUsersLambdaFunction"
              },
              "CodeSha256": "ZGFeEQ+buIMz1i2UtuKsZHyH8pfcupV15v4dXUsuOL4="
            }
          },
          "CreateTeamLambdaVersionZqdszReBrQz9pEqJZzcfKCe5YbkCmGLFqHDIMkZeOU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateTeamLambdaFunction"
              },
              "CodeSha256": "ZGFeEQ+buIMz1i2UtuKsZHyH8pfcupV15v4dXUsuOL4="
            }
          },
          "GetTeamsLambdaVersionDEQ9wL05rtw5QzYqtDkjzvlraqQ2Lf4NZS9Jnf35tk0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetTeamsLambdaFunction"
              },
              "CodeSha256": "ZGFeEQ+buIMz1i2UtuKsZHyH8pfcupV15v4dXUsuOL4="
            }
          },
          "UpdateTeamLambdaVersionJNIUEtQfueujwfT45PNzgkf4QRcoqKAck63cGdCbA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateTeamLambdaFunction"
              },
              "CodeSha256": "ZGFeEQ+buIMz1i2UtuKsZHyH8pfcupV15v4dXUsuOL4="
            }
          },
          "DeleteTeamLambdaVersionF3WoB4OGpXieWhoTu1Nkc8bzucvkDZgwreE4l6z50A": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteTeamLambdaFunction"
              },
              "CodeSha256": "ZGFeEQ+buIMz1i2UtuKsZHyH8pfcupV15v4dXUsuOL4="
            }
          },
          "UpdateTaskPatchLambdaVersion8WOPKGSDAYjj7CW9ieKglOJvNkKpNAWkAj28O7sw": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateTaskPatchLambdaFunction"
              },
              "CodeSha256": "ZGFeEQ+buIMz1i2UtuKsZHyH8pfcupV15v4dXUsuOL4="
            }
          },
          "NotifyTeamLambdaVersion2wLcS9gjn3w1Go1X5xSevNbOf7E5AiWIVLFLD7uBU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "NotifyTeamLambdaFunction"
              },
              "CodeSha256": "ZGFeEQ+buIMz1i2UtuKsZHyH8pfcupV15v4dXUsuOL4="
            }
          },
          "HttpApi": {
            "Type": "AWS::ApiGatewayV2::Api",
            "Properties": {
              "Name": "dev-task-management-backend",
              "ProtocolType": "HTTP",
              "CorsConfiguration": {
                "AllowHeaders": [
                  "Content-Type",
                  "Authorization"
                ],
                "AllowMethods": [
                  "GET",
                  "POST",
                  "PUT",
                  "PATCH",
                  "DELETE",
                  "OPTIONS"
                ],
                "AllowOrigins": [
                  "http://localhost:5173",
                  "https://d84l1y8p4kdic.cloudfront.net"
                ]
              }
            }
          },
          "HttpApiStage": {
            "Type": "AWS::ApiGatewayV2::Stage",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "StageName": "$default",
              "AutoDeploy": true,
              "DefaultRouteSettings": {
                "DetailedMetricsEnabled": false
              }
            }
          },
          "CreateTaskLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateTaskLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationCreateTask": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"CreateTaskLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostTasks": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /tasks",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationCreateTask"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationCreateTask"
          },
          "GetTasksLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetTasksLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetTasks": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetTasksLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetTasks": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /tasks",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetTasks"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetTasks"
          },
          "UpdateTaskLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateTaskLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationUpdateTask": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"UpdateTaskLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePutTasksIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PUT /tasks/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationUpdateTask"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationUpdateTask"
          },
          "DeleteTaskLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteTaskLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationDeleteTask": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"DeleteTaskLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteDeleteTasksIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "DELETE /tasks/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationDeleteTask"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationDeleteTask"
          },
          "GetUsersLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetUsersLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetUsers": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetUsersLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetUsers": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /users",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetUsers"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetUsers"
          },
          "CreateTeamLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateTeamLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationCreateTeam": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"CreateTeamLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostTeams": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /teams",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationCreateTeam"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationCreateTeam"
          },
          "GetTeamsLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetTeamsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetTeams": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetTeamsLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetTeams": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /teams",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetTeams"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetTeams"
          },
          "UpdateTeamLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateTeamLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationUpdateTeam": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"UpdateTeamLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePutTeamsIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PUT /teams/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationUpdateTeam"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationUpdateTeam"
          },
          "DeleteTeamLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteTeamLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationDeleteTeam": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"DeleteTeamLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteDeleteTeamsIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "DELETE /teams/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationDeleteTeam"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationDeleteTeam"
          },
          "UpdateTaskPatchLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateTaskPatchLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationUpdateTaskPatch": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"UpdateTaskPatchLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePatchTasksIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PATCH /tasks/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationUpdateTaskPatch"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationUpdateTaskPatch"
          },
          "NotifyTeamLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "NotifyTeamLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationNotifyTeam": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"NotifyTeamLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostNotify": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /notify",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationNotifyTeam"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationNotifyTeam"
          },
          "TasksTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "TasksTableV2",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "UsersTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "UsersV2",
              "AttributeDefinitions": [
                {
                  "AttributeName": "email",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "email",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "TeamsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "Teams",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "NotificationTopic": {
            "Type": "AWS::SNS::Topic",
            "Properties": {
              "TopicName": "taskNotificationTopic"
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-task-management-backend-dev-ServerlessDeploymentBucketName"
            }
          },
          "CreateTaskLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateTaskLambdaVersion8Z91hibZ7AV92l7hZeMHorPAa2icwTLYJhAmf4OYCs"
            },
            "Export": {
              "Name": "sls-task-management-backend-dev-CreateTaskLambdaFunctionQualifiedArn"
            }
          },
          "GetTasksLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetTasksLambdaVersionB5dG8eFZMI35JaeBOVQ4QDTApRKmYqyeSsc1E6pJCD8"
            },
            "Export": {
              "Name": "sls-task-management-backend-dev-GetTasksLambdaFunctionQualifiedArn"
            }
          },
          "UpdateTaskLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateTaskLambdaVersionVLQ1Z4VyBBAp6hQJv1EzEYWZF3rd8itUKphMt3TagTQ"
            },
            "Export": {
              "Name": "sls-task-management-backend-dev-UpdateTaskLambdaFunctionQualifiedArn"
            }
          },
          "DeleteTaskLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteTaskLambdaVersionAzECL8WaYO6446RUdzpJONvh5dVTqa2VvNbLfRszg"
            },
            "Export": {
              "Name": "sls-task-management-backend-dev-DeleteTaskLambdaFunctionQualifiedArn"
            }
          },
          "GetUsersLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetUsersLambdaVersionve1ui3kRSxxNIDhXDjLOMJTwbV7oTBSxbdpY5kHktuQ"
            },
            "Export": {
              "Name": "sls-task-management-backend-dev-GetUsersLambdaFunctionQualifiedArn"
            }
          },
          "CreateTeamLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateTeamLambdaVersionZqdszReBrQz9pEqJZzcfKCe5YbkCmGLFqHDIMkZeOU"
            },
            "Export": {
              "Name": "sls-task-management-backend-dev-CreateTeamLambdaFunctionQualifiedArn"
            }
          },
          "GetTeamsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetTeamsLambdaVersionDEQ9wL05rtw5QzYqtDkjzvlraqQ2Lf4NZS9Jnf35tk0"
            },
            "Export": {
              "Name": "sls-task-management-backend-dev-GetTeamsLambdaFunctionQualifiedArn"
            }
          },
          "UpdateTeamLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateTeamLambdaVersionJNIUEtQfueujwfT45PNzgkf4QRcoqKAck63cGdCbA"
            },
            "Export": {
              "Name": "sls-task-management-backend-dev-UpdateTeamLambdaFunctionQualifiedArn"
            }
          },
          "DeleteTeamLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteTeamLambdaVersionF3WoB4OGpXieWhoTu1Nkc8bzucvkDZgwreE4l6z50A"
            },
            "Export": {
              "Name": "sls-task-management-backend-dev-DeleteTeamLambdaFunctionQualifiedArn"
            }
          },
          "UpdateTaskPatchLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateTaskPatchLambdaVersion8WOPKGSDAYjj7CW9ieKglOJvNkKpNAWkAj28O7sw"
            },
            "Export": {
              "Name": "sls-task-management-backend-dev-UpdateTaskPatchLambdaFunctionQualifiedArn"
            }
          },
          "NotifyTeamLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "NotifyTeamLambdaVersion2wLcS9gjn3w1Go1X5xSevNbOf7E5AiWIVLFLD7uBU"
            },
            "Export": {
              "Name": "sls-task-management-backend-dev-NotifyTeamLambdaFunctionQualifiedArn"
            }
          },
          "HttpApiId": {
            "Description": "Id of the HTTP API",
            "Value": {
              "Ref": "HttpApi"
            },
            "Export": {
              "Name": "sls-task-management-backend-dev-HttpApiId"
            }
          },
          "HttpApiUrl": {
            "Description": "URL of the HTTP API",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "HttpApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  }
                ]
              ]
            },
            "Export": {
              "Name": "sls-task-management-backend-dev-HttpApiUrl"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "plugins": [
      "serverless-plugin-typescript",
      "serverless-offline"
    ],
    "pluginsData": {},
    "functions": {
      "createTask": {
        "handler": "src/handlers/createTask.handler",
        "events": [
          {
            "httpApi": {
              "path": "/tasks",
              "method": "post",
              "cors": true
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/tasks"
          }
        ],
        "name": "task-management-backend-dev-createTask",
        "package": {
          "exclude": [
            "node_modules/serverless-plugin-typescript"
          ],
          "include": [],
          "patterns": []
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "CreateTaskLambdaVersion8Z91hibZ7AV92l7hZeMHorPAa2icwTLYJhAmf4OYCs"
      },
      "getTasks": {
        "handler": "src/handlers/getTasks.handler",
        "events": [
          {
            "httpApi": {
              "path": "/tasks",
              "method": "get",
              "cors": true
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/tasks"
          }
        ],
        "name": "task-management-backend-dev-getTasks",
        "package": {
          "exclude": [
            "node_modules/serverless-plugin-typescript"
          ],
          "include": [],
          "patterns": []
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GetTasksLambdaVersionB5dG8eFZMI35JaeBOVQ4QDTApRKmYqyeSsc1E6pJCD8"
      },
      "updateTask": {
        "handler": "src/handlers/updateTask.handler",
        "events": [
          {
            "httpApi": {
              "path": "/tasks/{id}",
              "method": "put",
              "cors": true
            },
            "resolvedMethod": "PUT",
            "resolvedPath": "/tasks/{id}"
          }
        ],
        "name": "task-management-backend-dev-updateTask",
        "package": {
          "exclude": [
            "node_modules/serverless-plugin-typescript"
          ],
          "include": [],
          "patterns": []
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "UpdateTaskLambdaVersionVLQ1Z4VyBBAp6hQJv1EzEYWZF3rd8itUKphMt3TagTQ"
      },
      "deleteTask": {
        "handler": "src/handlers/deleteTask.handler",
        "events": [
          {
            "httpApi": {
              "path": "/tasks/{id}",
              "method": "delete",
              "cors": true
            },
            "resolvedMethod": "DELETE",
            "resolvedPath": "/tasks/{id}"
          }
        ],
        "name": "task-management-backend-dev-deleteTask",
        "package": {
          "exclude": [
            "node_modules/serverless-plugin-typescript"
          ],
          "include": [],
          "patterns": []
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "DeleteTaskLambdaVersionAzECL8WaYO6446RUdzpJONvh5dVTqa2VvNbLfRszg"
      },
      "getUsers": {
        "handler": "src/handlers/getUsers.handler",
        "events": [
          {
            "httpApi": {
              "path": "/users",
              "method": "get",
              "cors": true
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/users"
          }
        ],
        "name": "task-management-backend-dev-getUsers",
        "package": {
          "exclude": [
            "node_modules/serverless-plugin-typescript"
          ],
          "include": [],
          "patterns": []
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GetUsersLambdaVersionve1ui3kRSxxNIDhXDjLOMJTwbV7oTBSxbdpY5kHktuQ"
      },
      "createTeam": {
        "handler": "src/handlers/createTeam.handler",
        "events": [
          {
            "httpApi": {
              "path": "/teams",
              "method": "post",
              "cors": true
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/teams"
          }
        ],
        "name": "task-management-backend-dev-createTeam",
        "package": {
          "exclude": [
            "node_modules/serverless-plugin-typescript"
          ],
          "include": [],
          "patterns": []
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "CreateTeamLambdaVersionZqdszReBrQz9pEqJZzcfKCe5YbkCmGLFqHDIMkZeOU"
      },
      "getTeams": {
        "handler": "src/handlers/getTeam.handler",
        "events": [
          {
            "httpApi": {
              "path": "/teams",
              "method": "get",
              "cors": true
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/teams"
          }
        ],
        "name": "task-management-backend-dev-getTeams",
        "package": {
          "exclude": [
            "node_modules/serverless-plugin-typescript"
          ],
          "include": [],
          "patterns": []
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GetTeamsLambdaVersionDEQ9wL05rtw5QzYqtDkjzvlraqQ2Lf4NZS9Jnf35tk0"
      },
      "updateTeam": {
        "handler": "src/handlers/updateTeam.handler",
        "events": [
          {
            "httpApi": {
              "path": "/teams/{id}",
              "method": "put",
              "cors": true
            },
            "resolvedMethod": "PUT",
            "resolvedPath": "/teams/{id}"
          }
        ],
        "name": "task-management-backend-dev-updateTeam",
        "package": {
          "exclude": [
            "node_modules/serverless-plugin-typescript"
          ],
          "include": [],
          "patterns": []
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "UpdateTeamLambdaVersionJNIUEtQfueujwfT45PNzgkf4QRcoqKAck63cGdCbA"
      },
      "deleteTeam": {
        "handler": "src/handlers/deleteTeam.handler",
        "events": [
          {
            "httpApi": {
              "path": "/teams/{id}",
              "method": "delete",
              "cors": true
            },
            "resolvedMethod": "DELETE",
            "resolvedPath": "/teams/{id}"
          }
        ],
        "name": "task-management-backend-dev-deleteTeam",
        "package": {
          "exclude": [
            "node_modules/serverless-plugin-typescript"
          ],
          "include": [],
          "patterns": []
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "DeleteTeamLambdaVersionF3WoB4OGpXieWhoTu1Nkc8bzucvkDZgwreE4l6z50A"
      },
      "updateTaskPatch": {
        "handler": "src/handlers/updateTask.handler",
        "events": [
          {
            "httpApi": {
              "path": "/tasks/{id}",
              "method": "patch",
              "cors": true
            },
            "resolvedMethod": "PATCH",
            "resolvedPath": "/tasks/{id}"
          }
        ],
        "name": "task-management-backend-dev-updateTaskPatch",
        "package": {
          "exclude": [
            "node_modules/serverless-plugin-typescript"
          ],
          "include": [],
          "patterns": []
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "UpdateTaskPatchLambdaVersion8WOPKGSDAYjj7CW9ieKglOJvNkKpNAWkAj28O7sw"
      },
      "notifyTeam": {
        "handler": "src/handlers/notifyTeam.handler",
        "events": [
          {
            "httpApi": {
              "path": "/notify",
              "method": "post",
              "cors": true
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/notify"
          }
        ],
        "environment": {
          "NOTIFICATION_TOPIC_ARN": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"NotifyTeamLambdaFunction\"][\"Properties\"][\"Environment\"][\"Variables\"][\"NOTIFICATION_TOPIC_ARN\"]"
          }
        },
        "name": "task-management-backend-dev-notifyTeam",
        "package": {
          "exclude": [
            "node_modules/serverless-plugin-typescript"
          ],
          "include": [],
          "patterns": []
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "NotifyTeamLambdaVersion2wLcS9gjn3w1Go1X5xSevNbOf7E5AiWIVLFLD7uBU"
      }
    },
    "resources": {
      "Resources": {
        "TasksTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "TasksTableV2",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        },
        "UsersTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "UsersV2",
            "AttributeDefinitions": [
              {
                "AttributeName": "email",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "email",
                "KeyType": "HASH"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        },
        "TeamsTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "Teams",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        },
        "NotificationTopic": {
          "Type": "AWS::SNS::Topic",
          "Properties": {
            "TopicName": "taskNotificationTopic"
          }
        }
      },
      "Outputs": {}
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "service": "task-management-backend",
      "frameworkVersion": "3",
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "plugins": {
        "$ref": "$[\"service\"][\"plugins\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      }
    },
    "layers": {},
    "isDashboardMonitoringPreconfigured": false,
    "artifact": "/Users/catherinegyamfi/Desktop/Amalitech/Task Management System/backend/.build/.serverless/task-management-backend.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/task-management-backend/dev/1748868123421-2025-06-02T12:42:03.421Z",
    "artifact": "task-management-backend.zip"
  }
}